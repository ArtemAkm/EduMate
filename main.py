import telebot
from telebot import types
import re
import sqlite3
import atexit
import pytz
import datetime
from datetime import datetime, timedelta, date
import re
import schedule
import json
import time
from telebot.types import BotCommand, Message, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError
import threading
import transliterate
import random
import os
import shutil

import logging
import sys
import traceback

from chat_gpt import ask_gpt_with_timeout
models = ["gpt-4o", "gpt-4o-mini", "gpt-3.5-turbo"]

# error_log_file = r'C:\Users\konstpm\Desktop\Beneki\launcher\bot_error_log.txt'
# logging.basicConfig(filename=error_log_file, level=logging.ERROR)

# class CustomExceptionHook:
#     def __init__(self):
#         sys.excepthook = self.log_uncaught_exceptions

#     def log_uncaught_exceptions(self, ex_cls, ex, tb):
#         if tb:
#             logging.error(''.join(traceback.format_tb(tb)))
#             logging.error('{0}: {1}'.format(ex_cls.__name__, ex))
#         else:
#             pass

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—à–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
# CustomExceptionHook()

with open('config.json', 'r') as config_file:
    config = json.load(config_file)

timezone = pytz.timezone('Europe/Kiev')

conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    birthday TEXT,
    username TEXT
)
''')
conn.commit()

cursor.execute('''
CREATE TABLE IF NOT EXISTS schedule (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    day_of_week TEXT,
    lesson_number INTEGER,
    subject TEXT,
    start_time TEXT,
    end_time TEXT,
    command TEXT,
    reminded INTEGER DEFAULT 0
)
''')
conn.commit()

cursor.execute('''
CREATE TABLE IF NOT EXISTS homework (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    subject TEXT,
    homework TEXT,
    photo_ids TEXT,
    date TEXT
)
''')
conn.commit()


cursor.execute('''
CREATE TABLE IF NOT EXISTS important_events (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    start_date TEXT,
    end_date TEXT,
    event_text TEXT
)
''')
conn.commit()

cursor.execute('''
CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id INTEGER,
    user_id INTEGER,
    message_id INTEGER,
    has_buttons INTEGER DEFAULT 0
)
''')
conn.commit()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS homework_state (
        user_id INTEGER PRIMARY KEY,
        chat_id INTEGER,
        subject TEXT,
        homework TEXT,
        photo_ids TEXT,
        step TEXT
    )
''')
conn.commit()

cursor.execute('''
CREATE TABLE IF NOT EXISTS banned_users (
    user_id INTEGER PRIMARY KEY,
    ban_end_time TIMESTAMP,
    ban_reason TEXT
)
''')
conn.commit()



bot = telebot.TeleBot(config['api_token'], use_class_middlewares = True) 

commands = [
    BotCommand("start", "–ù–∞—á–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ"),
    BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"),
    BotCommand("get_info", "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ"),
    BotCommand("register", "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
    BotCommand("homework", "–ó–∞–ø–∏—Å–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"),
    BotCommand("message_admin", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É"),
    BotCommand("info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
]

admin_commands = [
    BotCommand("monday", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"),
    BotCommand("tuesday", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫"),
    BotCommand("wednesday", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ä–µ–¥—É"),
    BotCommand("thursday", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —á–µ—Ç–≤–µ—Ä–≥"),
    BotCommand("friday", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É"),
    BotCommand("add_event", "–°–æ–∑–¥–∞—Ç—å –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"),
    BotCommand("delete_event", "–£–¥–∞–ª–∏—Ç—å –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"),
    BotCommand("list_events", "–°–ø–∏—Å–æ–∫ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"),
    BotCommand("list_users", "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
    BotCommand("edit_lesson", "–ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–∫ –ø–æ –¥–Ω—é –∏ –Ω–æ–º–µ—Ä—É —É—Ä–æ–∫–∞"),
    BotCommand("delete_last_lesson", "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å"),
    BotCommand("add_lesson", "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫ –≤ –∫–æ–Ω–µ—Ü –¥–Ω—è")
]

god_commands = [
    BotCommand("clear_db", "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–¥"),
    BotCommand("delete_homework", "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª–µ –¥–æ–º–∞—à–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
    BotCommand("show_homework", "–í—ã–≤–æ–¥ –ë–î –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π"),
    BotCommand("broadcast_message", "–†–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"),
    BotCommand("message_user", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
]

admin_ids = config['admin_ids']
god_id = config['god_id']

@bot.message_handler(commands=['unban'])
def unban_user(message):
    if is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å.")
        bot.register_next_step_handler(message, perform_unban)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def perform_unban(message):
    try:
        user_id = int(message.text)
        cursor.execute("SELECT 1 FROM banned_users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        
        if result:
            cursor.execute("DELETE FROM banned_users WHERE user_id = ?", (user_id,))
            conn.commit()
            bot.send_message(message.chat.id, f"‚úÖ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω.")
            text = "üëÆ –ë–∞–Ω –±—ã–ª —Å–Ω—è—Ç\n\n–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞. –ù–∞–ø–∏—à–∏ /help —á—Ç–æ-–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
            show_schedule_buttons(user_id, text)
        else:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö.")
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@bot.message_handler(commands=['ban'])
def start_ban_process(message):
    if is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å.")
        bot.register_next_step_handler(message, get_user_id)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def get_user_id(message):
    try:
        user_id = int(message.text)
        if user_id == message.chat.id:
            bot.send_message(message.chat.id, "‚ùå–ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
            return
        if user_id == god_id:
            bot.send_message(message.chat.id, "‚ùå–ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å —Ç–æ–≥–æ, –∫—Ç–æ –≤—ã—à–µ —Ç–µ–±—è –ø–æ —É—Ä–æ–≤–Ω—é")
            bot.send_message(god_id, f"üëÆ–¢–µ–±—è –ø—ã—Ç–∞–ª—Å—è –∑–∞–±–∞–Ω–∏—Ç—å @{message.from_user.username}")
            return
        cursor.execute("SELECT 1 FROM banned_users WHERE user_id = ?", (user_id,))
        if cursor.fetchone():
            bot.send_message(message.chat.id, "‚ùå–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω")
            return
        cursor.execute("SELECT name, username FROM users WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        if result:
            name, username = result
            markup = types.InlineKeyboardMarkup()
            confirm_button = types.InlineKeyboardButton("–î–∞", callback_data=f"confirm_ban_{user_id}")
            cancel_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_ban")
            markup.add(confirm_button, cancel_button)
            bot.send_message(
                message.chat.id,
                f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name} (@{username})?",
                reply_markup=markup
            )
        else:
            bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

def ask_ban_reason(message, user_id, duration):
    msg = bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–∞–Ω–∞.")
    bot.register_next_step_handler(msg, save_ban, user_id, duration)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("confirm_ban_"))
def confirm_ban(call):
    user_id = int(call.data.split("_")[-1])
    msg = bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '30 —Å–µ–∫—É–Ω–¥', '7 –º–∏–Ω—É—Ç', '1 –¥–µ–Ω—å').")
    bot.register_next_step_handler(msg, set_ban_duration, user_id)
    bot.delete_message(call.message.chat.id, call.message.message_id)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∞ –∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—á–∏–Ω—ã
def set_ban_duration(message, user_id):
    try:
        duration = parse_duration(message.text)
        if not duration:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        ask_ban_reason(message, user_id, duration)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –£–∫–∞–∂–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '7 –¥–Ω–µ–π', '30 –º–∏–Ω—É—Ç', '1 —á–∞—Å'.")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–Ω–∞
def save_ban(message, user_id, duration):
    reason = message.text
    admin_name = message.from_user.username
    ban_end_time = datetime.now() + duration
    cursor.execute(
        "INSERT OR REPLACE INTO banned_users (user_id, ban_end_time, ban_reason) VALUES (?, ?, ?)", 
        (user_id, ban_end_time, reason)
    )
    conn.commit()
    
    bot.send_message(
        user_id, 
        f"üëÆ –¢—ã –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–°—Ä–æ–∫: {duration}\n"
        f"–¢–µ–±—è –∑–∞–±–∞–Ω–∏–ª: @{admin_name}\n\n"
        f"–°—á–∏—Ç–∞–µ—à—å –±–∞–Ω –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–º? –ù–∞–ø–∏—à–∏ –æ–± —ç—Ç–æ–º @akmdnepr", 
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.send_message(message.chat.id, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω.")

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ timedelta
def parse_duration(duration_str):
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–ª–∞ –∏ –µ–¥–∏–Ω–∏—Ü—ã –≤—Ä–µ–º–µ–Ω–∏
    match = re.match(r"(\d+)\s*(\w+)", duration_str, re.IGNORECASE)
    if not match:
        return None
    
    amount = int(match.group(1))
    unit = match.group(2).lower()

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º
    units = {
        '—Å–µ–∫—É–Ω–¥–∞': ['—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥'],
        '–º–∏–Ω—É—Ç–∞': ['–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'],
        '—á–∞—Å': ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'],
        '–¥–µ–Ω—å': ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']
    }

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–ª—é—á–∞ –ø–æ —Å–ª–æ–≤–∞—Ä—é units
    def get_unit_key(unit):
        for key, forms in units.items():
            if unit in forms:
                return key
        return None

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ timedelta
    key = get_unit_key(unit)
    if key == '—Å–µ–∫—É–Ω–¥–∞':
        return timedelta(seconds=amount)
    elif key == '–º–∏–Ω—É—Ç–∞':
        return timedelta(minutes=amount)
    elif key == '—á–∞—Å':
        return timedelta(hours=amount)
    elif key == '–¥–µ–Ω—å':
        return timedelta(days=amount)
    else:
        return None

def is_user_banned(user_id):
    cursor.execute("SELECT ban_end_time FROM banned_users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        ban_end_time = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S.%f')
        if datetime.now() < ban_end_time:
            return True
    return False


@bot.message_handler(func=lambda message: is_user_banned(message.from_user.id))
def delete_message_if_banned(message):
    bot.delete_message(message.chat.id, message.message_id)

def check_ban_expiration():
    cursor.execute("SELECT user_id, ban_end_time FROM banned_users")
    banned_users = cursor.fetchall()
    for user_id, ban_end_time_str in banned_users:
        ban_end_time = datetime.strptime(ban_end_time_str, '%Y-%m-%d %H:%M:%S.%f')
        if datetime.now() >= ban_end_time:
            cursor.execute("DELETE FROM banned_users WHERE user_id = ?", (user_id,))
            conn.commit()
            text = f"üëÆ–°—Ä–æ–∫ —Ç–≤–æ–µ–≥–æ –±–∞–Ω–∞ –∏—Å—Ç–µ–∫! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞\n–ï—Å–ª–∏ –∑–∞–±—ã–ª –∫–∞–∫–∏–µ-–ª–∏–±–æ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø–∏—à–∏ /help"
            show_schedule_buttons(user_id, text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –±–∞–Ω–∞
@bot.callback_query_handler(func=lambda call: call.data == "cancel_ban")
def cancel_ban(call):
    bot.send_message(call.message.chat.id, "–ë–∞–Ω –æ—Ç–º–µ–Ω–µ–Ω.")
    bot.delete_message(call.message.chat.id, call.message.message_id)

        
def get_help_message(user_id):
    help_message = "üë§ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
    for command in commands:
        help_message += f"/{command.command} - {command.description}\n"
    
    if user_id in admin_ids:
        help_message += "\nüîí –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n"
        for command in admin_commands:
            help_message += f"/{command.command} - {command.description}\n"
    
    if user_id == god_id:
        help_message += "\nüëë –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞:\n"
        for command in god_commands:
            help_message += f"/{command.command} - {command.description}\n"

    return help_message

schedule_sent_today = config.get('schedule_sent_today')
user_data = {}
start_time = time.time()

def is_admin(user_id):
    return user_id in admin_ids

@bot.message_handler(commands=['clear_chat'])
def clear_chat(message):
    bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")

@bot.message_handler(commands=['list_users'])
def list_users(message):
    if message.from_user.id in admin_ids:
        cursor.execute("SELECT user_id, name, birthday, username FROM users")
        users = cursor.fetchall()

        if users:
            response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            for user in users:
                user_id, name, birthday, username = user
                response += f"ID: {user_id}\n"
                response += f"–ò–º—è: {name}\n"
                response += f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday}\n"
                response += f"Username: @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                response += "-" * 20 + "\n"
        else:
            response = "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=['clear_db'])
def clear_database(message):
    if message.from_user.id == god_id:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        bot.register_next_step_handler(msg, process_confirmation_code)
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def process_confirmation_code(message):
    if message.text == confirmation_code:
        try:
            cursor.execute('DELETE FROM users')
            cursor.execute('DELETE FROM schedule')
            cursor.execute('DELETE FROM homework')
            cursor.execute('DELETE FROM important_events')
            conn.commit()
            bot.send_message(message.chat.id, "–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")
        except Exception as e:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞.")


def show_schedule_buttons(chatid, text):
    markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    itembtn1 = types.KeyboardButton('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
    itembtn2 = types.KeyboardButton('–í—Ç–æ—Ä–Ω–∏–∫')
    itembtn3 = types.KeyboardButton('–°—Ä–µ–¥–∞')
    itembtn4 = types.KeyboardButton('–ß–µ—Ç–≤–µ—Ä–≥')
    itembtn5 = types.KeyboardButton('–ü—è—Ç–Ω–∏—Ü–∞')
    markup.add(itembtn1, itembtn2, itembtn3, itembtn4, itembtn5)
    
    bot.send_message(chatid, text, reply_markup=markup)

def add_schedule_day(day, message):
    if message.from_user.id not in admin_ids:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    cursor.execute('DELETE FROM schedule WHERE day_of_week = ?', (day,))
    conn.commit()

    bot.send_message(message.chat.id, f"–¢—ã –∑–∞–ø–æ–ª–Ω—è–µ—à—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '—Å—Ç–æ–ø' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    bot.register_next_step_handler(message, lambda msg: ask_lesson_info(day, 1, msg))

confirmation_code = config['code']

def ask_lesson_info(day, lesson_number, message):
    if message.text.lower() == '—Å—Ç–æ–ø':
        bot.send_message(message.chat.id, f"–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {day} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        return
    
    subject = message.text
    
    cursor.execute('SELECT subject FROM homework WHERE subject=?', (subject,))
    existing_subject = cursor.fetchone()

    if not existing_subject:
        cursor.execute('INSERT INTO homework (subject, homework) VALUES (?, ?)', (subject, '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω–æ'))
        conn.commit()
    
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—Ä–æ–∫–∞ {lesson_number} (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")
    bot.register_next_step_handler(message, lambda msg: ask_start_time(day, lesson_number, subject, msg))

def ask_start_time(day, lesson_number, subject, message):
    start_time = message.text
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Ä–æ–∫–∞ {lesson_number} (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")
    bot.register_next_step_handler(message, lambda msg: ask_end_time(day, lesson_number, subject, start_time, msg))

def ask_end_time(day, lesson_number, subject, start_time, message):
    end_time = message.text

    command = generate_command(subject)
    cursor.execute('''
        INSERT INTO schedule (day_of_week, lesson_number, subject, start_time, end_time, command)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (day, lesson_number, subject, start_time, end_time, command))
    conn.commit()

    bot.send_message(message.chat.id, f"–£—Ä–æ–∫ {lesson_number} ({subject}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}.")
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '—Å—Ç–æ–ø' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    bot.register_next_step_handler(message, lambda msg: ask_lesson_info(day, lesson_number + 1, msg))

@bot.message_handler(commands=['monday'])
def handle_monday(message):
    add_schedule_day('Monday', message)

@bot.message_handler(commands=['tuesday'])
def handle_tuesday(message):
    add_schedule_day('Tuesday', message)

@bot.message_handler(commands=['wednesday'])
def handle_wednesday(message):
    add_schedule_day('Wednesday', message)

@bot.message_handler(commands=['thursday'])
def handle_thursday(message):
    add_schedule_day('Thursday', message)

@bot.message_handler(commands=['friday'])
def handle_friday(message):
    add_schedule_day('Friday', message)

def ask_name(message):
    user_name = message.text
    user_id = message.from_user.id

    if re.match(r'^[^a-zA-Z–∞-—è–ê-–Ø]', user_name):  
        bot.send_message(user_id, "–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:")
        bot.register_next_step_handler(message, ask_name)
        return

    cursor.execute('INSERT INTO users (user_id, name) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET name=?', (user_id, user_name, user_name))
    conn.commit()
    
    bot.send_message(user_id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {user_name} üòâ")
    bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, –∫–æ–≥–¥–∞ —É —Ç–µ–±—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è? (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)")
    bot.register_next_step_handler_by_chat_id(user_id, ask_birthday)

def ask_birthday(message):
    user_birthday = message.text
    user_id = message.from_user.id
    
    date_pattern = r"^\d{2}\.\d{2}\.\d{4}$"

    if re.match(date_pattern, user_birthday):
        try:
            day, month, year = map(int, user_birthday.split('.'))
            date_valid = datetime(year, month, day)

            cursor.execute('UPDATE users SET birthday=? WHERE user_id=?', (user_birthday, user_id))
            conn.commit()

            show_schedule_buttons(user_id, "–û—Ç–ª–∏—á–Ω–æ, –∑–∞–ø–æ–º–Ω–∏–ª!")
            bot.send_message(user_id, "–ù–∞ —ç—Ç–æ–º –≤—Å–µ, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /register")
            bot.send_message(user_id, "–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /help")

        
        except ValueError:
            bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            bot.register_next_step_handler(message, ask_birthday)
    
    else:
        bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        bot.register_next_step_handler(message, ask_birthday)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    cursor.execute('SELECT name, birthday FROM users WHERE user_id=?', (user_id,))
    user = cursor.fetchone()

    if user_id == god_id:
        full_commands = commands + admin_commands + god_commands
    elif is_admin(user_id):
        full_commands = commands + admin_commands
    else:
        full_commands = commands
    
    bot.set_my_commands(full_commands, scope=types.BotCommandScopeChat(message.chat.id))
    
    if user:
        name, birthday = user
        
        if not name:
            show_schedule_buttons(user_id, "–î–ª—è –Ω–∞—á–∞–ª–∞, –∫–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?")
            bot.register_next_step_handler(message, ask_name)
        elif not birthday:
            bot.send_message(user_id, f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø –µ—â–µ –Ω–µ –∑–Ω–∞—é, –∫–æ–≥–¥–∞ —É —Ç–µ–±—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è.")
            bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
            bot.register_next_step_handler_by_chat_id(user_id, ask_birthday)
        else:
            bot.send_message(user_id, f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}! –†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üòä")
            show_schedule_buttons(user_id, "–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?")
    else:
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –Ø EduMate!üëã")
        bot.send_message(user_id, "–ß—Ç–æ-—Ç–æ —è —Ç–µ–±—è –Ω–µ –ø—Ä–∏–ø–æ–º–∏–Ω–∞—é ü§î")
        bot.send_message(user_id, "–ù–µ –±–µ–¥–∞, —Å–µ–π—á–∞—Å –∏—Å–ø—Ä–∞–≤–∏–º")
        bot.send_message(user_id, "–î–ª—è –Ω–∞—á–∞–ª–∞, –∫–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?")
        bot.register_next_step_handler(message, ask_name)

    cursor.execute('INSERT INTO users (user_id, username) VALUES (?, ?) ON CONFLICT(user_id) DO UPDATE SET username=?', (user_id, username, username))
    conn.commit()

@bot.message_handler(commands=['get_info'])
def get_user_info(message):
    user_id = message.from_user.id
    
    cursor.execute('SELECT name, birthday, username FROM users WHERE user_id=?', (user_id,))
    user = cursor.fetchone()
    
    if user:
        name, birthday, username = user
        response = f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ:\n–ò–º—è: {name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n–ù–∏–∫–Ω–µ–π–º: @{username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
    else:
        response = "–Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start."

    bot.send_message(user_id, response)

@bot.message_handler(commands=['register'])
def reregister(message):
    bot.send_message(message.chat.id, "–î–∞–≤–∞–π –æ–±–Ω–æ–≤–∏–º —Ç–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
    bot.send_message(message.chat.id, "–ö–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?")
    bot.register_next_step_handler(message, ask_name)


def add_important_event(start_date, end_date, event_text):
    cursor.execute('''
    INSERT INTO important_events (start_date, end_date, event_text)
    VALUES (?, ?, ?)
    ''', (start_date, end_date, event_text))
    conn.commit()

def delete_important_event(event_id):
    cursor.execute('''
    DELETE FROM important_events WHERE id=?
    ''', (event_id,))
    conn.commit()

user_messages = {}

def get_important_events():
    now = datetime.now(timezone).strftime('%Y-%m-%d')
    cursor.execute('SELECT * FROM important_events WHERE end_date >= ?', (now,))
    events = cursor.fetchall()
    return events

def remove_expired_events():
    now = datetime.now(timezone).strftime('%Y-%m-%d')
    cursor.execute('DELETE FROM important_events WHERE end_date < ?', (now,))
    conn.commit()

def send_important_events(user_id, schedule_message_id):
    events = get_important_events()
    
    if user_id not in user_messages:
        user_messages[user_id] = []
    
    if not events:
        attach_collapse_button(user_id, schedule_message_id, 'schedule')
        return
    
    response = "üì¢ <b>–í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:</b>\n\n"
    for event in events:
        response += f"üîπ {event[3]}\n"
    
    event_message = bot.send_message(user_id, response, parse_mode="HTML")
    
    user_messages[user_id].append(event_message.message_id)
    
    attach_collapse_button(user_id, event_message.message_id, 'schedule')

def attach_collapse_button(user_id, message_id, message_type='schedule'):
    markup = InlineKeyboardMarkup()
    
    collapse_button = InlineKeyboardButton(
        text="–°–≤–µ—Ä–Ω—É—Ç—å", 
        callback_data=f'{message_type}_collapse_{user_id}_{message_id}'
    )
    
    markup.add(collapse_button)
    
    bot.edit_message_reply_markup(user_id, message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('schedule_collapse_'))
def handle_schedule_collapse(call):
    user_id, message_id = map(int, call.data.split('_')[2:])
    
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                bot.delete_message(call.message.chat.id, msg_id)
            except Exception as e:
                pass

        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except Exception as e:
            pass

        del user_messages[user_id]

@bot.message_handler(commands=['help'])
def send_help(message: Message):
    user_id = message.from_user.id
    help_message = get_help_message(user_id)
    bot.send_message(message.chat.id, help_message)

schedule.every().day.at("00:05").do(remove_expired_events)

@bot.message_handler(func=lambda message: message.text in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞'])
def show_day_schedule(message):
    user_id = message.from_user.id
    days_translation = {
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'Monday',
        '–í—Ç–æ—Ä–Ω–∏–∫': 'Tuesday',
        '–°—Ä–µ–¥–∞': 'Wednesday',
        '–ß–µ—Ç–≤–µ—Ä–≥': 'Thursday',
        '–ü—è—Ç–Ω–∏—Ü–∞': 'Friday'
    }
    
    day = days_translation[message.text]
    
    if user_id not in user_messages:
        user_messages[user_id] = []
    
    user_messages[user_id].append(message.message_id)
    
    cursor.execute('SELECT lesson_number, subject, start_time, end_time, command FROM schedule WHERE day_of_week=? ORDER BY lesson_number', (day,))
    lessons = cursor.fetchall()
    
    if lessons:
        response = f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {message.text}:</b>\n\n"
        for lesson_number, subject, start_time, end_time, command in lessons:
            response += f"üîπ <b>{lesson_number}</b>. <b>{subject}</b> {start_time} - {end_time}\n"
            response += f"   üî∏ <i>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</i> \n   {command}\n\n"
        
        schedule_message = bot.send_message(message.chat.id, response, parse_mode="HTML")
        user_messages[user_id].append(schedule_message.message_id)
        send_important_events(user_id, schedule_message.message_id)
    else:
        empty_schedule_message = bot.send_message(message.chat.id, f"üîπ –ù–∞ {message.text} –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        user_messages[user_id].append(empty_schedule_message.message_id)
        send_important_events(user_id, empty_schedule_message.message_id)

tips = [
    "–ü—Ä–æ–ø–∞–ª–∏ –∫–Ω–æ–ø–∫–∏? –ù–∞–ø–∏—à–∏ /start",
    "–ï—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –±–æ—Ç—É? –ù–∞–ø–∏—à–∏ /message_admin",
    "–î–æ–º–∞—à–∫–∞ –Ω–∞ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞? –ù–∞–ø–∏—à–∏ /homework –∏ –æ–±–Ω–æ–≤–∏!",
    "–ë–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å? –ù–∞–ø–∏—à–∏ –æ–± —ç—Ç–æ–º @akmdnepr",
    "–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ /message_admin"
]

def load_config():
    with open('config.json', 'r') as file:
        return json.load(file)

def save_config(config):
    with open('config.json', 'w') as file:
        json.dump(config, file)

def check_schedule():
    now = datetime.now(timezone)
    current_time = now.strftime("%H:%M")
    current_day = now.strftime("%A")

    local_cursor = conn.cursor()

    local_cursor.execute('SELECT id, lesson_number, start_time, end_time, subject, reminded FROM schedule WHERE day_of_week=?', (current_day,))
    lessons = local_cursor.fetchall()

    config = load_config()
    today_date = now.strftime("%Y-%m-%d")
    tips_sent = config.get('date') == today_date and config.get('tips_sent', False)

    for lesson_id, lesson_number, start_time, end_time, subject, reminded in lessons:
        if subject == "–ù–∏—á–µ–≥–æ":
            local_cursor.execute('UPDATE schedule SET reminded=3 WHERE id=?', (lesson_id,))
            conn.commit()
            continue 
        lesson_time = datetime.strptime(start_time, "%H:%M").replace(tzinfo=timezone)
        end_time_dt = datetime.strptime(end_time, "%H:%M").replace(tzinfo=timezone)

        lesson_time = now.replace(hour=lesson_time.hour, minute=lesson_time.minute, second=0, microsecond=0)
        end_time_dt = now.replace(hour=end_time_dt.hour, minute=end_time_dt.minute, second=0, microsecond=0)

        if 0 <= (lesson_time - now).total_seconds() <= 300 and reminded == 0:
            local_cursor.execute('SELECT user_id FROM users')
            users = local_cursor.fetchall()

            for user_id, in users:
                try:
                    text = f"üü†–°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è {subject}! –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ {start_time}."
                    show_schedule_buttons(user_id, text)
                except TelegramError:
                    pass

            local_cursor.execute('UPDATE schedule SET reminded=1 WHERE id=?', (lesson_id,))
            conn.commit()

        if now >= lesson_time and now <= lesson_time + timedelta(minutes=1) and reminded == 1:
            local_cursor.execute('SELECT user_id FROM users')
            users = local_cursor.fetchall()

            for user_id, in users:
                try:
                    bot.send_message(user_id, f"üî¥–£—Ä–æ–∫ {subject} –Ω–∞—á–∞–ª—Å—è!")
                except TelegramError:
                    pass

            local_cursor.execute('UPDATE schedule SET reminded=2 WHERE id=?', (lesson_id,))
            conn.commit()

        if now >= end_time_dt and reminded == 2:
            local_cursor.execute('SELECT lesson_number, start_time, subject FROM schedule WHERE day_of_week=? AND lesson_number=?', (current_day, lesson_number + 1))
            next_lesson = local_cursor.fetchone()

            if next_lesson:
                next_lesson_number, next_start_time, next_subject = next_lesson
                next_start_time_dt = datetime.strptime(next_start_time, "%H:%M").replace(tzinfo=timezone)

                if next_start_time_dt < end_time_dt:
                    next_start_time_dt += timedelta(days=1)

                break_duration = int((next_start_time_dt - end_time_dt).total_seconds() // 60)

                message = f"üü¢–£—Ä–æ–∫ ‚Ññ{lesson_number} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ ({next_subject}) –Ω–∞—á–Ω–µ—Ç—Å—è –≤ {next_start_time}."
            else:
                message = f"üü¢–£—Ä–æ–∫ ‚Ññ{lesson_number} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."


            local_cursor.execute('SELECT user_id FROM users')
            users = local_cursor.fetchall()

            for user_id, in users:
                try:
                    bot.send_message(user_id, message)
                except TelegramError:
                    pass

            if lesson_number == 2 and not tips_sent:
                random.shuffle(tips) 
                random.shuffle(users)

                for user, tip in zip(users, tips):
                    user_id = user[0]
                    try:
                        bot.send_message(user_id, f"üí° –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞:\n{tip}")
                    except TelegramError:
                        pass

                config['date'] = today_date
                config['tips_sent'] = True
                save_config(config)

            local_cursor.execute('UPDATE schedule SET reminded=0 WHERE id=?', (lesson_id,))
            conn.commit()
    check_ban_expiration()
schedule.every().second.do(check_schedule)

admin_id = god_id

def relative_date(date_str):
    from datetime import datetime, date as dt

    if not date_str:
        return ""

    try:
        if isinstance(date_str, str):
            date = datetime.strptime(date_str, '%Y-%m-%d').date()
        else:
            date = date_str

    except ValueError:
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã"

    today = dt.today()
    delta = today - date

    if delta.days == 0:
        return "–°–µ–≥–æ–¥–Ω—è"
    elif delta.days == 1:
        return "–í—á–µ—Ä–∞"
    else:
        days = delta.days
        if 11 <= days % 100 <= 19:  
            day_word = "–¥–Ω–µ–π"
        else:
            last_digit = days % 10
            if last_digit == 1:
                day_word = "–¥–µ–Ω—å"
            elif 2 <= last_digit <= 4:
                day_word = "–¥–Ω—è"
            else:
                day_word = "–¥–Ω–µ–π"
        return f"{days} {day_word} –Ω–∞–∑–∞–¥"
    
def save_message_to_db(chat_id, user_id, message_id, has_buttons=0):
    cursor.execute('''
        INSERT INTO messages (chat_id, user_id, message_id, has_buttons) 
        VALUES (?, ?, ?, ?)
    ''', (chat_id, user_id, message_id, has_buttons))
    conn.commit()

def delete_messages_from_db(chat_id, user_id):
    cursor.execute('SELECT message_id FROM messages WHERE chat_id=? AND user_id=?', (chat_id, user_id))
    messages = cursor.fetchall()
    
    for message_id in messages:
        try:
            bot.delete_message(chat_id, message_id[0])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id[0]}: {e}")

    cursor.execute('DELETE FROM messages WHERE chat_id=? AND user_id=?', (chat_id, user_id))
    conn.commit()

@bot.message_handler(commands=['homework'])
def handle_homework(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    msg = bot.send_message(chat_id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∑:")
    save_message_to_db(chat_id, user_id, msg.message_id)
    update_homework_state(user_id, chat_id, None, None, None, 'get_homework')
    bot.register_next_step_handler(msg, get_homework)

def get_homework(message):
    subject = message.text
    chat_id = message.chat.id
    user_id = message.from_user.id

    save_message_to_db(chat_id, user_id, message.message_id)

    update_homework_state(user_id, chat_id, subject, None, None, 'collect_homework_data')

    cursor.execute('SELECT homework, photo_ids, date FROM homework WHERE LOWER(subject)=LOWER(?)', (subject,))
    lesson = cursor.fetchone()

    if lesson:
        homework_text, photo_ids, date = lesson
        if date:
            date = datetime.strptime(date, '%Y-%m-%d').date()
            date_text = f"\nüî∏–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {relative_date(date)}"
        else:
            date_text = f"\nüî∏–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞."

        current_homework_message = f"\nüî∏–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è {subject}:\n\n{homework_text}\n{date_text}"

        media = []
        if photo_ids:
            photos = photo_ids.split(',')
            for i, photo in enumerate(photos):
                if i == len(photos) - 1:
                    media.append(types.InputMediaPhoto(photo, caption=current_homework_message))
                else:
                    media.append(types.InputMediaPhoto(photo))

            sent_messages = bot.send_media_group(chat_id, media)
            for msg in sent_messages:
                save_message_to_db(chat_id, user_id, msg.message_id)
        else:
            msg = bot.send_message(chat_id, current_homework_message)
            save_message_to_db(chat_id, user_id, msg.message_id)

        markup = types.InlineKeyboardMarkup()
        yes_button = types.InlineKeyboardButton("–î–∞", callback_data=f'overwrite_yes|{subject}')
        no_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data='overwrite_no')
        markup.add(yes_button, no_button)

        msg = bot.send_message(chat_id, "–¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ?", reply_markup=markup)
        save_message_to_db(chat_id, user_id, msg.message_id, has_buttons=1)

        # –ß–µ–∫–ø–æ–∏–Ω—Ç: –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥ `awaiting_confirmation` –≤ –±–∞–∑—É
        update_homework_state(user_id, chat_id, subject, None, None, 'awaiting_confirmation')
    else:
        bot.send_message(chat_id, "–£—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('overwrite_yes') or call.data == 'overwrite_no')
def confirm_overwrite(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    delete_messages_from_db(chat_id, user_id)

    if call.data == 'overwrite_no':
        bot.send_message(chat_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /homework, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞")
    else:
        subject = call.data.split('|')[1]
        msg = bot.send_message(chat_id, f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è {subject}:")
        save_message_to_db(chat_id, user_id, msg.message_id)
        
        bot.register_next_step_handler(msg, lambda msg: collect_homework_data(subject, msg))


def collect_homework_data(subject, message):
    homework = message.text
    chat_id = message.chat.id
    user_id = message.from_user.id

    save_message_to_db(chat_id, user_id, message.message_id)

    update_homework_state(user_id, chat_id, subject, homework, None, 'collect_photos')

    msg = bot.send_message(message.chat.id, "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ - –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ. –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ '—Å—Ç–æ–ø'")
    save_message_to_db(chat_id, user_id, msg.message_id)

    bot.register_next_step_handler(msg, lambda msg: collect_photos(subject, homework, [], msg))


def collect_photos(subject, homework, photo_ids, message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    save_message_to_db(chat_id, user_id, message.message_id)

    if message.text and message.text.lower() == '—Å—Ç–æ–ø':
        save_homework_to_db(subject, homework, photo_ids, user_id, message.from_user.username)
        delete_messages_from_db(chat_id, user_id)

        cursor.execute('DELETE FROM homework_state WHERE user_id=?', (user_id,))
        conn.commit()

        bot.send_message(message.chat.id, f"–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å ‚ò∫Ô∏è\n\n–ù–∞–ø–∏—à–∏ /homework, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è")
        return

    if message.photo:
        file_id = message.photo[-1].file_id
        photo_ids.append(file_id)
        
        update_homework_state(user_id, chat_id, subject, homework, ','.join(photo_ids), 'collect_photos')

        msg = bot.send_message(message.chat.id, "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å –µ—â—ë –æ–¥–Ω–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '—Å—Ç–æ–ø' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        save_message_to_db(chat_id, user_id, msg.message_id)

    bot.register_next_step_handler(message, lambda msg: collect_photos(subject, homework, photo_ids, msg))

def save_homework_to_db(subject, homework_text, photo_ids, chat_id, username):
    photo_ids_str = ','.join(photo_ids) if photo_ids else None
    today = date.today().strftime('%Y-%m-%d')

    cursor.execute('UPDATE homework SET homework=?, photo_ids=?, date=? WHERE subject=?',
                   (homework_text, photo_ids_str, today, subject))
    conn.commit()

    notify_admin(subject, homework_text, photo_ids, chat_id, username)
    

def notify_admin(subject, homework_text, photo_ids, chat_id, username):
    homework_message = (f"‚ùóÔ∏è–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ‚ùóÔ∏è\n\n"
                        f"‚ñ´Ô∏è–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{username} (ID: {chat_id})\n\n"
                        f"‚ñ´Ô∏è–ü—Ä–µ–¥–º–µ—Ç: {subject}\n\n"
                        f"‚ñ´Ô∏è–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n\n{homework_text}")

    if photo_ids:
        media_group = []
        
        for index, file_id in enumerate(photo_ids):
            if index == 0:
                media_group.append(types.InputMediaPhoto(file_id, caption=homework_message))
            else:
                media_group.append(types.InputMediaPhoto(file_id))
        
        bot.send_media_group(god_id, media_group)
    else:
        bot.send_message(god_id, homework_message)

def update_homework_state(user_id, chat_id, subject, homework, photo_ids, step):
    cursor.execute('''
        INSERT INTO homework_state (user_id, chat_id, subject, homework, photo_ids, step)
        VALUES (?, ?, ?, ?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET
        chat_id=excluded.chat_id,
        subject=excluded.subject,
        homework=excluded.homework,
        photo_ids=excluded.photo_ids,
        step=excluded.step
    ''', (user_id, chat_id, subject, homework, photo_ids, step))
    conn.commit()


def check_unfinished_states():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT user_id, chat_id, subject, homework, photo_ids, step FROM homework_state')
    unfinished_states = cursor.fetchall()

    for user_id, chat_id, subject, homework, photo_ids, step in unfinished_states:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω—è—é—Å—å, —è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª—Å—è. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–≥–æ –∂–µ –º–µ—Å—Ç–∞.")
        
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        if step == 'get_homework':
            if not subject:  # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –µ–≥–æ
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞.")
                bot.register_next_step_handler_by_chat_id(chat_id, get_homework)
            else:
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –≤–≤–µ–¥–µ–Ω, –ø—Ä–µ–¥–ª–æ–∂–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–º–µ–Ω—É
                send_confirmation_request(chat_id, subject)
        elif step == 'awaiting_confirmation':
            # –ï—Å–ª–∏ –±–æ—Ç –∂–¥–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ, –ø—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(chat_id, "–ñ–¥—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –∑–∞–º–µ–Ω—É –∑–∞–¥–∞–Ω–∏—è.")
        elif step == 'collect_homework_data':
            if not homework:
                bot.send_message(chat_id, f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è {subject}.")
                bot.register_next_step_handler_by_chat_id(chat_id, lambda msg: collect_homework_data(subject, msg))
            else:
                collect_photos(subject, homework, photo_ids)
        elif step == 'collect_photos':
            bot.send_message(chat_id, "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –ø—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ. –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏ '—Å—Ç–æ–ø'.")
            bot.register_next_step_handler_by_chat_id(chat_id, lambda msg: collect_photos(subject, homework, photo_ids.split(','), msg))


def send_confirmation_request(chat_id, subject):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    yes_button = types.InlineKeyboardButton("–î–∞", callback_data=f'overwrite_yes|{subject}')
    no_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data='overwrite_no')
    markup.add(yes_button, no_button)

    msg = bot.send_message(chat_id, "–¢–æ—á–Ω–æ —Ö–æ—á–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ?", reply_markup=markup)
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –º—ã –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    cursor.execute('UPDATE homework_state SET step=? WHERE chat_id=?', ('awaiting_confirmation', chat_id))
    conn.commit()
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    bot.register_callback_query_handler(handle_confirmation_response, lambda call: call.data.startswith('overwrite_yes') or call.data == 'overwrite_no')

def handle_confirmation_response(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    if call.data == 'overwrite_no':
        bot.send_message(chat_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /homework, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.")
        cursor.execute('DELETE FROM homework_state WHERE user_id=?', (user_id,))
        conn.commit()
    else:
        subject = call.data.split('|')[1]
        msg = bot.send_message(chat_id, f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è {subject}.")
        save_message_to_db(chat_id, user_id, msg.message_id)
        update_homework_state(user_id, chat_id, subject, None, None, 'collect_homework_data')
        bot.register_next_step_handler(msg, lambda msg: collect_homework_data(subject, msg))

@bot.message_handler(commands=['delete_homework'])
def handle_delete_homework(message):
    if message.from_user.id == admin_id:
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ ID –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, delete_homework)
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

def delete_homework(message):
    try:
        homework_id = int(message.text)

        cursor.execute('SELECT * FROM homework WHERE id=?', (homework_id,))
        homework_data = cursor.fetchone()

        if homework_data:
            cursor.execute('DELETE FROM homework WHERE id=?', (homework_id,))
            conn.commit()

            bot.send_message(message.chat.id, f"–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å ID {homework_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        
def reset_reminders():
    backup_folder = 'beneki_backup'
    
    if not os.path.exists(backup_folder):
        os.makedirs(backup_folder)
    
    for filename in os.listdir(backup_folder):
        file_path = os.path.join(backup_folder, filename)
        if os.path.isfile(file_path):
            os.remove(file_path)
    
    shutil.copy('users.db', backup_folder)
    
    local_cursor = conn.cursor()
    local_cursor.execute('UPDATE schedule SET reminded=0')
    conn.commit()


schedule.every().day.at("00:01").do(reset_reminders)

def check_end_of_day():
    global schedule_sent_today 

    now = datetime.now(timezone)
    current_day = now.strftime("%A")
    current_time = now.strftime("%H:%M")

    days_translation = {
        'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
        'Wednesday': '–°—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'Saturday': '–°—É–±–±–æ—Ç–∞',
        'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    
    if schedule_sent_today:
        return False  

    conn = sqlite3.connect('users.db')  
    cursor = conn.cursor()

    try:
        cursor.execute('SELECT end_time FROM schedule WHERE day_of_week=? ORDER BY lesson_number DESC LIMIT 1', (current_day,))
        last_lesson = cursor.fetchone()

        if last_lesson:
            last_end_time = last_lesson[0]
            if current_time >= last_end_time: 
                next_day_eng = (now + timedelta(days=1)).strftime("%A")
                next_day_rus = days_translation.get(next_day_eng, next_day_eng)  

                cursor.execute('SELECT lesson_number, subject, start_time, end_time, command FROM schedule WHERE day_of_week=? ORDER BY lesson_number', (next_day_eng,))
                lessons_tomorrow = cursor.fetchall()
                
                cursor.execute('SELECT user_id FROM users')
                users = cursor.fetchall()

                for user_id, in users:
                    try:
                        if lessons_tomorrow:
                            response = f"üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({next_day_rus}):</b>\n\n"
                            for lesson_number, subject, start_time, end_time, command in lessons_tomorrow:
                                response += f"üîπ <b>{lesson_number}</b>. <b>{subject}</b> {start_time} - {end_time}\n"
                                response += f"   üî∏ <i>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</i> \n   {command}\n\n"
                            
                            message = bot.send_message(user_id, response, parse_mode="HTML")
                            send_important_events(user_id, message.message_id) 
                        else:
                            message = bot.send_message(user_id, "üîπ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –∑–∞–≤—Ç—Ä–∞ —É —Ç–µ–±—è –Ω–µ—Ç —É—Ä–æ–∫–æ–≤!")
                            send_important_events(user_id, message.message_id)  
                    
                    except TelegramError:
                        pass

                schedule_sent_today = True
                config['schedule_sent_today'] = True
                save_config(config)
                return True
    finally:
        cursor.close()
        conn.close()

    return False

def reset_schedule_flag():
    global schedule_sent_today
    schedule_sent_today = False
    config['schedule_sent_today'] = False
    save_config(config)

schedule.every().day.at("00:01").do(reset_schedule_flag)

schedule.every().minute.do(check_end_of_day)

def generate_command(subject_name):
    subject_name = subject_name.lower().replace(' ', '_') 
    subject_name = subject_name.replace('/', '_').replace('.', '_')  
    subject_name = transliterate.translit(subject_name, reversed=True)  
    command = f"/h_{subject_name}"
    return command


@bot.message_handler(func=lambda message: message.text.startswith('/h_'))
def handle_homework_command(message):
    command = message.text

    cursor.execute('SELECT subject FROM schedule WHERE command=?', (command,))
    subject_data = cursor.fetchone()

    if subject_data:
        subject = subject_data[0]

        cursor.execute('SELECT homework, photo_ids, date FROM homework WHERE subject=?', (subject,))
        homework_data = cursor.fetchone()

        if homework_data:
            homework, photo_ids, homework_date = homework_data

            if homework_date:
                last_modified_message = f"\n\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {relative_date(homework_date)}"
            else:
                last_modified_message = ""

            full_homework_message = f"{homework}{last_modified_message}"

            if photo_ids:
                photo_ids_list = photo_ids.split(',')
                media_group = []
                for photo_id in photo_ids_list:
                    media_group.append(types.InputMediaPhoto(photo_id, caption=full_homework_message if len(media_group) == 0 else ''))

                media_messages = bot.send_media_group(message.chat.id, media_group)
                media_message_ids = [media.message_id for media in media_messages]

                markup = types.InlineKeyboardMarkup()
                collapse_button = types.InlineKeyboardButton(
                    "–°–≤–µ—Ä–Ω—É—Ç—å", 
                    callback_data=f'homework_collapse_{message.message_id}_{",".join(map(str, media_message_ids))}'
                )
                markup.add(collapse_button)

                bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ —á—Ç–æ–±—ã —Å–≤–µ—Ä–Ω—É—Ç—å", reply_markup=markup)
            else:
                markup = types.InlineKeyboardMarkup()
                collapse_button = types.InlineKeyboardButton(
                    "–°–≤–µ—Ä–Ω—É—Ç—å", 
                    callback_data=f'homework_collapse_{message.message_id}_{message.message_id}'
                )
                markup.add(collapse_button)

                bot.send_message(message.chat.id, full_homework_message, reply_markup=markup)
        else:
            bot.send_message(message.chat.id, f"–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        bot.send_message(message.chat.id, f"–ö–æ–º–∞–Ω–¥–∞ {command} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('homework_collapse_'))
def handle_homework_collapse(call):
    data_parts = call.data.split('_')
    user_message_id = int(data_parts[2])
    message_ids = data_parts[3].split(',')

    try:
        bot.delete_message(call.message.chat.id, user_message_id)
    except telebot.apihelper.ApiTelegramException as e:
        if "message to delete not found" not in str(e):
            raise

    for message_id in message_ids:
        try:
            bot.delete_message(call.message.chat.id, int(message_id))
        except telebot.apihelper.ApiTelegramException as e:
            if "message to delete not found" not in str(e):
                raise

    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except telebot.apihelper.ApiTelegramException as e:
        if "message to delete not found" not in str(e):
            raise

@bot.message_handler(commands=['add_event'])
def start_add_event(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú):")
    bot.register_next_step_handler(message, process_start_date)

def process_start_date(message):
    if not is_admin(message.from_user.id):
        return

    try:
        start_date_input = message.text.strip()
        start_date = datetime.strptime(start_date_input + f".{datetime.now().year}", "%d.%m.%Y").date()

        user_data[message.from_user.id] = {'start_date': start_date}
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú):")
        bot.register_next_step_handler(message, process_end_date)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.")
        bot.register_next_step_handler(message, process_start_date)

def process_start_date(message):
    if not is_admin(message.from_user.id):
        return

    try:
        start_date_input = message.text.strip()
        start_date = datetime.strptime(start_date_input + f".{datetime.now().year}", "%d.%m.%Y").date()

        user_data[message.from_user.id] = {'start_date': start_date}
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú):")
        bot.register_next_step_handler(message, process_end_date)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.")
        bot.register_next_step_handler(message, process_start_date)

def process_end_date(message):
    if not is_admin(message.from_user.id):
        return

    try:
        end_date_input = message.text.strip()
        end_date = datetime.strptime(end_date_input + f".{datetime.now().year}", "%d.%m.%Y").date()

        user_data[message.from_user.id]['end_date'] = end_date
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è:")
        bot.register_next_step_handler(message, process_event_text)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.")
        bot.register_next_step_handler(message, process_end_date)


def process_event_text(message):
    if not is_admin(message.from_user.id):
        return

    try:
        event_text = message.text.strip()
        user_id = message.from_user.id
        
        start_date = user_data[user_id]['start_date']
        end_date = user_data[user_id]['end_date']

        add_important_event(start_date, end_date, event_text)
        
        bot.send_message(message.chat.id, "–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
        
        del user_data[user_id]
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")
        if user_id in user_data:
            del user_data[user_id]

@bot.message_handler(commands=['delete_event'])
def delete_event_command(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        event_id = int(message.text.split(' ')[1])
        delete_important_event(event_id)
        bot.reply_to(message, f"–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['list_events'])
def list_events_command(message):
    if not is_admin(message.from_user.id):
        bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    cursor.execute('SELECT id, start_date, end_date, event_text FROM important_events')
    events = cursor.fetchall()

    if events:
        response = "üìÖ <b>–í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:</b>\n\n"
        for event in events:
            event_id, start_date, end_date, event_text = event
            response += f"üîπ <b>ID:</b> {event_id}\n   <b>–°–æ–±—ã—Ç–∏–µ:</b> {event_text}\n   <b>–° {start_date} –ø–æ {end_date}</b>\n\n"
        bot.send_message(message.chat.id, response, parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")

def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)


scheduler_thread = threading.Thread(target=run_scheduler)
scheduler_thread.start()

days_mapping = {
    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'Monday',
    '–í—Ç–æ—Ä–Ω–∏–∫': 'Tuesday',
    '–°—Ä–µ–¥–∞': 'Wednesday',
    '–ß–µ—Ç–≤–µ—Ä–≥': 'Thursday',
    '–ü—è—Ç–Ω–∏—Ü–∞': 'Friday'
}

@bot.message_handler(commands=['edit_lesson'])
def edit_lesson(message: Message):
    if is_admin(message.from_user.id):
        markup = types.InlineKeyboardMarkup()
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
        for day in days:
            markup.add(types.InlineKeyboardButton(day, callback_data=f"edit_day_{day}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_day_'))
def select_day(call: types.CallbackQuery):
    day_of_week_rus = call.data.split('_')[2]
    day_of_week_eng = days_mapping[day_of_week_rus]
    bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {day_of_week_rus}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞:")
    bot.register_next_step_handler(call.message, process_edit_lesson, day_of_week_eng)

def process_edit_lesson(message: Message, day_of_week):
    try:
        lesson_number = message.text
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ (–ü—Ä–∏–º–µ—Ä: –§–∏–∑—Ä–∞ 15:30 16:00):")
        bot.register_next_step_handler(message, finalize_edit_lesson, day_of_week, lesson_number)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

def finalize_edit_lesson(message: Message, day_of_week, lesson_number):
    try:
        data = message.text.rsplit(' ', 2)
        if len(data) == 3:
            subject, start_time, end_time = data[0], data[1], data[2]
            homework_link = generate_command(subject)
            
            cursor.execute('SELECT subject FROM homework WHERE subject=?', (subject,))
            existing_subject = cursor.fetchone()
            if not existing_subject:
                cursor.execute('INSERT INTO homework (subject, homework) VALUES (?, ?)', (subject, '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω–æ'))
                conn.commit()
            
            cursor.execute('''
                UPDATE schedule
                SET subject = ?, start_time = ?, end_time = ?, command = ?
                WHERE day_of_week = ? AND lesson_number = ?
            ''', (subject, start_time, end_time, homework_link, day_of_week, lesson_number))
            conn.commit()
            
            bot.send_message(message.chat.id, f"–£—Ä–æ–∫ {lesson_number} –Ω–∞ {day_of_week} –∏–∑–º–µ–Ω—ë–Ω.")
        else:
            bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['delete_last_lesson'])
def delete_last_lesson(message: Message):
    if is_admin(message.from_user.id):
        markup = types.InlineKeyboardMarkup()
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
        for day in days:
            markup.add(types.InlineKeyboardButton(day, callback_data=f"delete_last_{day}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_last_'))
def process_delete_last_lesson(call: types.CallbackQuery):
    day_of_week_rus = call.data.split('_')[2]
    day_of_week_eng = days_mapping.get(day_of_week_rus)
    if day_of_week_eng:
        try:
            cursor.execute('''
                SELECT MAX(lesson_number) FROM schedule WHERE day_of_week = ?
            ''', (day_of_week_eng,))
            last_lesson_number = cursor.fetchone()[0]
            if last_lesson_number:
                cursor.execute('''
                    DELETE FROM schedule WHERE day_of_week = ? AND lesson_number = ?
                ''', (day_of_week_eng, last_lesson_number))
                conn.commit()
                bot.send_message(call.message.chat.id, f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –Ω–æ–º–µ—Ä {last_lesson_number} –Ω–∞ {day_of_week_rus} —É–¥–∞–ª—ë–Ω.")
            else:
                bot.send_message(call.message.chat.id, "–ù–µ—Ç —É—Ä–æ–∫–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")
        except Exception as e:
            bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
    else:
        bot.send_message(call.message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.")



@bot.message_handler(commands=['add_lesson'])
def add_lesson(message: Message):
    if is_admin(message.from_user.id):
        markup = types.InlineKeyboardMarkup()
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
        for day in days:
            markup.add(types.InlineKeyboardButton(day, callback_data=f"add_lesson_{day}"))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞:", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('add_lesson_'))
def process_add_lesson(call: types.CallbackQuery):
    day_of_week_rus = call.data.split('_')[2]
    day_of_week_eng = days_mapping.get(day_of_week_rus)
    if day_of_week_eng:
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –ø—Ä–µ–¥–º–µ—Ç, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ (–ü—Ä–∏–º–µ—Ä: –§–∏–∑—Ä–∞ 15:30 16:00):")
        bot.register_next_step_handler(call.message, finalize_add_lesson, day_of_week_eng)
    else:
        bot.send_message(call.message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.")

def finalize_add_lesson(message: Message, day_of_week):
    try:
        data = message.text.rsplit(' ', 2)
        if len(data) == 3:
            subject, start_time, end_time = data[0], data[1], data[2]
            command = generate_command(subject)
            
            cursor.execute('SELECT subject FROM homework WHERE subject=?', (subject,))
            existing_subject = cursor.fetchone()
            if not existing_subject:
                cursor.execute('INSERT INTO homework (subject, homework) VALUES (?, ?)', (subject, '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω–æ'))
                conn.commit()
            
            cursor.execute('SELECT MAX(lesson_number) FROM schedule WHERE day_of_week = ?', (day_of_week,))
            last_lesson_number = cursor.fetchone()[0] or 0
            new_lesson_number = last_lesson_number + 1
            
            cursor.execute('''
                INSERT INTO schedule (day_of_week, lesson_number, subject, start_time, end_time, command)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (day_of_week, new_lesson_number, subject, start_time, end_time, command))
            conn.commit()
            
            bot.send_message(message.chat.id, f"–ù–æ–≤—ã–π —É—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ {day_of_week}: {subject} ({start_time} - {end_time})")
        else:
            bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")

def check_birthdays():
    today = datetime.today().strftime('%d.%m')

    cursor.execute("SELECT user_id, name, birthday FROM users")
    users = cursor.fetchall()

    for user in users:
        user_id = user[0]
        name = user[1]
        birthday = user[2]

        if birthday and isinstance(birthday, str) and len(birthday) >= 5:
            birthday_day_month = birthday[:5]
            
            if birthday_day_month == today:
                send_birthday_message(user_id, name)
        else:
            print(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name} (ID: {user_id}).")

def send_birthday_message(user_id, name):
    message = f"üéâ{name}, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –î–Ω—ë–º –†–æ–∂–¥–µ–Ω–∏—è! üéÇü•≥ –ñ–µ–ª–∞—é –≤—Å–µ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ!"
    bot.send_message(user_id, message)

schedule.every().day.at("08:20").do(check_birthdays)


@bot.message_handler(commands=['broadcast_message'])
def broadcast_message(message):
    user_id = message.from_user.id

    if user_id != god_id:
        bot.send_message(user_id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É!")
        return

    bot.send_message(user_id, "–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    bot.register_next_step_handler(message, send_broadcast)

def send_broadcast(message):
    user_id = message.from_user.id
    broadcast_text = message.text

    if not broadcast_text:
        bot.send_message(user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return

    cursor.execute('SELECT user_id FROM users')
    users = cursor.fetchall()

    for user in users:
        try:
            bot.send_message(user[0], broadcast_text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")

    bot.send_message(user_id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    

@bot.message_handler(commands=['show_homework'])
def show_homework(message):
    user_id = message.from_user.id

    if user_id != god_id:
        bot.send_message(user_id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É!")
        return

    cursor.execute('SELECT id, subject FROM homework')
    homework_list = cursor.fetchall()

    if not homework_list:
        bot.send_message(user_id, "–î–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    homework_message = "üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
    for hw_id, subject in homework_list:
        homework_message += f"ID: {hw_id} ‚ñ´Ô∏è {subject}\n"
    bot.send_message(user_id, homework_message)


@bot.message_handler(commands=['message_admin'])
def ask_for_message(message):
    user_id = message.from_user.id
    msg = bot.send_message(user_id, "–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É:")
    bot.register_next_step_handler(msg, forward_message_to_admin)

def forward_message_to_admin(message):
    user_message = message.text
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    username = message.from_user.username

    admin_message = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n" \
                    f"–ò–º—è: {user_name}\n" \
                    f"Username: @{username}\n" \
                    f"User ID: {user_id}\n\n" \
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ: \n{user_message}"

    try:
        bot.send_message(god_id, admin_message)
        bot.send_message(user_id, "–ê–¥–º–∏–Ω –ø–æ–ª—É—á–∏–ª —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
    except Exception as e:
        bot.send_message(user_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

@bot.message_handler(commands=['message_user'])
def ask_for_user_id(message):
    if message.from_user.id == god_id:
        msg = bot.send_message(god_id, "–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        bot.register_next_step_handler(msg, ask_for_message_to_user)
    else:
        bot.send_message(message.from_user.id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")

def ask_for_message_to_user(message):
    try:
        user_id = int(message.text)
        msg = bot.send_message(god_id, f"–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        bot.register_next_step_handler(msg, send_message_to_user, user_id)
    except ValueError:
        bot.send_message(god_id, "–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

def send_message_to_user(message, user_id):
    admin_message = message.text
    try:
        bot.send_message(user_id, f"‚ùóÔ∏è–¢–µ–±–µ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{admin_message}")
        bot.send_message(god_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
    except Exception as e:
        bot.send_message(god_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç")

def get_bot_info():
    info = {}
    with open('bot_info.txt', 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if ': ' in line:
                key, value = line.split(': ', 1) 
                info[key] = value
    return info

def get_uptime():
    uptime_seconds = int(time.time() - start_time)
    days = uptime_seconds // 86400
    hours = (uptime_seconds % 86400) // 3600
    minutes = (uptime_seconds % 3600) // 60
    seconds = uptime_seconds % 60
    uptime_str = f"{days:02d}:{hours:02d}:{minutes:02d}:{seconds:02d}"
    return uptime_str

@bot.message_handler(commands=['info'])
def send_info(message):
    info = get_bot_info()
    uptime = get_uptime()
    
    response = (f"üìã –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {info['version']}\n"
                f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {info['last_modified']}\n"
                f"üìù –ñ—É—Ä–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {info['additional_info']}\n\n"
                f"‚è≥ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø–µ—Ä–µ–±–æ–µ–≤: {uptime}")
    
    bot.send_message(message.chat.id, response)

def read_update_history():
    file_path = 'update_history.txt'
    if os.path.exists(file_path):
        if os.path.getsize(file_path) > 0:
            with open(file_path, 'r', encoding='utf-8') as file:
                return file.read()
        else:
            return "–ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    return "–ò—Å—Ç–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

@bot.message_handler(commands=['update_history'])
def update_history(message):
    history = read_update_history()
    bot.send_message(message.chat.id, history)

check_unfinished_states()

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_query = message.text

    preparing_message = bot.reply_to(message, "‚è≥ –û–±–¥—É–º—ã–≤–∞—é –æ—Ç–≤–µ—Ç...")

    gpt_response = None
    for model in models:
        gpt_response = ask_gpt_with_timeout(model, user_query)
        if gpt_response:
            break

    if not gpt_response:
        gpt_response = "üò¥–ß—Ç–æ-—Ç–æ —è —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤—ã—Å–ø–∞–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ"

    try:
        bot.edit_message_text(chat_id=preparing_message.chat.id,
                              message_id=preparing_message.message_id,
                              text=gpt_response)
    except Exception as e:
        bot.send_message(chat_id=message.chat.id, text=gpt_response)


def close_connection():
    conn.close()

atexit.register(close_connection)

bot.polling()